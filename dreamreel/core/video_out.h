#ifndef _VIDEO_OUT_H
#define _VIDEO_OUT_H

#include "avcodec.h"

typedef struct vo_frame_s vo_frame_t;
struct vo_frame_s {

  /*
   * public variables to decoders and vo drivers
   * changing anything here will require recompiling them both
   */
  int        in_use;        /* set when the frame is being used */
  int64_t    pts;           /* presentation time stamp (1/90000 sec) */
  int64_t    vpts;          /* virtual pts, generated by metronom */
  int        bad_frame;     /* e.g. frame skipped or based on skipped frame */
  int        duration;      /* frame length in time, in 1/90000 sec */
  int        last_frame;    /* set to non-zero if this is the last frame */

  /* YUV420P, YUV410P, YUV411P:
   *   base[0]: Y0 Y1 Y2 ...
   *   base[1]: U0 U1 U2 ...
   *   base[2]: V0 V1 V2 ...
   *   base[3]: V0 V1 V2 ..., subtractive 16-bit values
   * YUV422:
   *   base[0]: Y U Y V  Y U Y V
   *   base[1] = base[2] = base[3] = NULL
   * PAL8 (8-bit palette indices):
   *   base[0] = I0 I1 I2 I3 ...
   *   base[1] = base[2] = base[3] = NULL
   */
  pvr_ptr_t  base[4];
  int        pitches[4];

  /* if this variable is non-zero, palette[] contains the palette that
   * needs to be loaded when this frame is displayed */
  int new_palette;
  unsigned int palette[256];
};

/* functions for interfacing to the video output */
int init_video_out(void);
int reset_video_out(void);
void lock_twiddle_texture(void);
void draw_texture_slice(
  uint8_t **src_ptr, int linesize,
  int y, int width, int height);
void send_texture(int64_t pts, int64_t vpts, int palette_change, 
  int *palette, int last_frame);
void stop_video_out_thread(void);
int all_video_frames_ready(void);
void start_video_playback(void);
void stop_video_playback(void);

#endif
